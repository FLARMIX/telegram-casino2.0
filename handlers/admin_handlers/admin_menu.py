from json import loads

from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from handlers.init_router import router

from database.database import Database
from scripts.scripts import Scripts


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /give
class GiveBalanceStates(StatesGroup):
    choosing_currency = State()  # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
    entering_username = State()  # –í–≤–æ–¥ username
    entering_amount = State()    # –í–≤–æ–¥ —Å—É–º–º—ã


class SetBalanceStates(StatesGroup):
    choosing_currency = State()  # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
    entering_username = State()  # –í–≤–æ–¥ username
    entering_amount = State()    # –í–≤–æ–¥ —Å—É–º–º—ã


class AddItemStates(StatesGroup):
    entering_username = State()  # –í–≤–æ–¥ username
    entering_item = State()      # –í–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞
    entering_quantity = State()  # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞


# –ö–æ–º–∞–Ω–¥–∞ /admin
@router.message(Command("admin"))
async def admin_menu(message: Message, state: FSMContext):
    db = Database()
    user_id = message.from_user.id

    if not db.get_user_stat(user_id, "is_admin"):
        await message.answer("‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="give_balance")],
        [InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="set_balance")],
        [InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="give_item")],
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="update_items")]
    ])

    await message.answer(
        "üîê –ê–¥–º–∏–Ω-–º–µ–Ω—é:",
        reply_markup=keyboard,
        reply_to_message_id=message.message_id
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@router.callback_query(F.data == "set_balance")
async def set_balance_start(callback: CallbackQuery, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≤–∞–ª—é—Ç—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å (m)", callback_data="currency_main")],
        [InlineKeyboardButton(text="–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å (a)", callback_data="currency_alt")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

    await callback.message.answer(
        "‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞–ª—é—Ç—ã:",
        reply_markup=keyboard
    )
    await state.set_state(SetBalanceStates.choosing_currency)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
@router.callback_query(SetBalanceStates.choosing_currency, F.data.in_(["currency_main", "currency_alt"]))
async def currency_chosen(callback: CallbackQuery, state: FSMContext):
    currency_type = "balance_main" if callback.data == "currency_main" else "balance_alt"
    await state.update_data(currency_type=currency_type)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤–∞–ª—é—Ç—ã

    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):"
    )
    await state.set_state(SetBalanceStates.entering_username)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username
@router.message(SetBalanceStates.entering_username)
async def username_entered(message: Message, state: FSMContext):
    username = message.text.strip().replace("@", "")  # –£–±–∏—Ä–∞–µ–º @, –µ—Å–ª–∏ –µ—Å—Ç—å
    await state.update_data(username=username)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º username

    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    await state.set_state(SetBalanceStates.entering_amount)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@router.message(SetBalanceStates.entering_amount)
async def amount_entered(message: Message, state: FSMContext, db: Database):
    scr = Scripts()
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ ‚Äî —á–∏—Å–ª–æ
    try:
        amount = scr.unformat_number(scr.amount_changer(message.text))

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        target_id = db.get_user_id_by_tgusername('@' + user_data["username"])
    except Exception:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
    db.update_user(user_data["currency_type"], amount, target_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
    formatted_amount = scr.amount_changer(str(amount))

    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_data['username']} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å {formatted_amount}$!"
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å"
@router.callback_query(F.data == "give_balance")
async def give_set_balance_start(callback: CallbackQuery, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≤–∞–ª—é—Ç—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å (m)", callback_data="currency_main")],
        [InlineKeyboardButton(text="–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å (a)", callback_data="currency_alt")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

    await callback.message.answer(
        "‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞–ª—é—Ç—ã:",
        reply_markup=keyboard
    )
    await state.set_state(GiveBalanceStates.choosing_currency)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
@router.callback_query(GiveBalanceStates.choosing_currency, F.data.in_(["currency_main", "currency_alt"]))
async def currency_chosen(callback: CallbackQuery, state: FSMContext):
    currency_type = "balance_main" if callback.data == "currency_main" else "balance_alt"
    await state.update_data(currency_type=currency_type)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤–∞–ª—é—Ç—ã

    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):"
    )
    await state.set_state(GiveBalanceStates.entering_username)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username
@router.message(GiveBalanceStates.entering_username)
async def username_entered(message: Message, state: FSMContext):
    username = message.text.strip().replace("@", "")  # –£–±–∏—Ä–∞–µ–º @, –µ—Å–ª–∏ –µ—Å—Ç—å
    print(username)
    await state.update_data(username=username)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º username

    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    await state.set_state(GiveBalanceStates.entering_amount)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@router.message(GiveBalanceStates.entering_amount)
async def amount_entered(message: Message, state: FSMContext):
    db = Database()
    scr = Scripts()
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ ‚Äî —á–∏—Å–ª–æ
    try:
        amount = scr.unformat_number(scr.amount_changer(message.text))

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        print(user_data)
        target_id = db.get_user_id_by_tgusername('@' + user_data["username"])
    except Exception:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    current_balance = db.get_user_stat(target_id, user_data["currency_type"])
    db.update_user(user_data["currency_type"], current_balance + amount, target_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
    formatted_amount = scr.amount_changer(str(amount))

    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_data['username']} –≤—ã–¥–∞–Ω–æ {formatted_amount}$!"
    )
    await state.clear()


@router.callback_query(F.data == "give_item")
async def give_item_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):"
    )
    await state.set_state(AddItemStates.entering_username)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username
@router.message(AddItemStates.entering_username)
async def username_entered(message: Message, state: FSMContext):
    username = message.text.strip().replace("@", "")  # –£–±–∏—Ä–∞–µ–º @, –µ—Å–ª–∏ –µ—Å—Ç—å
    await state.update_data(username=username)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º username

    await message.answer("üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
    await state.set_state(AddItemStates.entering_item)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
@router.message(AddItemStates.entering_item)
async def item_entered(message: Message, state: FSMContext):
    item = message.text.strip()
    await state.update_data(item=item)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–º–µ—Ç

    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await state.set_state(AddItemStates.entering_quantity)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@router.message(AddItemStates.entering_quantity)
async def quantity_entered(message: Message, state: FSMContext):
    db = Database()
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Äî —á–∏—Å–ª–æ
    try:
        quantity = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        target_id = db.get_user_id_by_tgusername('@' + user_data["username"])
    except Exception:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # –í—ã–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    try:
        for _ in range(quantity):
            db.add_item_to_user(target_id, user_data["item"])
    except ValueError as e:
        await message.answer(str(e))
        await state.clear()
        return

    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_data['username']} –≤—ã–¥–∞–Ω–æ {quantity} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ '{user_data['item']}'!"
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç"
@router.callback_query(F.data == "give_item")
async def give_item_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):"
    )
    await state.set_state(AddItemStates.entering_username)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username
@router.message(AddItemStates.entering_username)
async def username_entered(message: Message, state: FSMContext):
    username = message.text.strip().replace("@", "")  # –£–±–∏—Ä–∞–µ–º @, –µ—Å–ª–∏ –µ—Å—Ç—å
    await state.update_data(username=username)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º username

    await message.answer("üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
    await state.set_state(AddItemStates.entering_item)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
@router.message(AddItemStates.entering_item)
async def item_entered(message: Message, state: FSMContext):
    item = message.text.strip()
    await state.update_data(item=item)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–º–µ—Ç

    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await state.set_state(AddItemStates.entering_quantity)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@router.message(AddItemStates.entering_quantity)
async def quantity_entered(message: Message, state: FSMContext):
    db = Database()
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Äî —á–∏—Å–ª–æ
    try:
        quantity = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        target_id = db.get_user_id_by_tgusername('@' + user_data["username"])
    except Exception:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # –í—ã–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    try:
        for _ in range(quantity):
            db.add_item_to_user(target_id, user_data["item"])
    except ValueError as e:
        await message.answer(str(e))
        await state.clear()
        return

    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_data['username']} –≤—ã–¥–∞–Ω–æ {quantity} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ '{user_data['item']}'!"
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã"
@router.callback_query(F.data == "update_items")
async def update_items_handler(callback: CallbackQuery):
    db = Database()
    user_id = callback.from_user.id

    if db.get_user_stat(user_id, "is_admin"):
        with open("handlers/admin_handlers/items.json", 'r', encoding='utf-8') as json_data:
            data = loads(json_data.read())
        db.update_items(data)
        await callback.message.answer("‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_to_message_id=callback.message.message_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@router.callback_query(F.data == "cancel")
async def cancel_operation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")