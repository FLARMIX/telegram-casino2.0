from aiogram import F
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from config import Bot_username
from database.methods import get_user_by_tguserid, update_user, get_item_by_name, get_user_avatar, get_dict_user_items
from database.models import ItemType

from handlers.init_router import router

from scripts.loggers import log
from scripts.media_cache import file_cache_original
from scripts.scripts import Scripts

from aiogram.utils.markdown import hlink


@router.message(F.text.lower().in_(['—è', 'me', '/—è', '/me', f'/me@{Bot_username}']))
@log('Logging the ME command...')
async def me(message: Message, session: AsyncSession):
    scr = Scripts()
    user_id = message.from_user.id
    username = message.from_user.username

    if not await get_user_by_tguserid(session, user_id):
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /register')
        return

    user = await get_user_by_tguserid(session, message.from_user.id)
    is_username = user.tgusername
    if not is_username[1:] == username:
        await update_user(session, 'tgusername', '@' + username, user.tguserid)

    tg_username = user.tgusername
    tg_username = tg_username[1:]

    is_hidden = user.is_hidden
    username = user.username

    if is_hidden:
        formated_username = username
    else:
        formated_username = hlink(f'{username}', f'https://t.me/{tg_username}')

    balance_main = str(user.balance_main)
    balance_alt = str(user.balance_alt)
    bonus_count = str(user.bonus_count)
    mini_bonus_count = str(user.mini_bonus_count)
    roulette_zero_count = str(user.roulette_zero_count)
    slot_777_count = str(user.slot_777_count)
    rank = str(user.rank)

    # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏–≥—Ä–æ–∫–∞
    avatar_item = await get_user_avatar(session, user.tguserid)
    item_obj = await get_item_by_name(session, avatar_item)
    avatar_path = str(item_obj.item_path)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    items = await get_dict_user_items(session, user.tguserid)
    avatar_items = dict()
    property_items = dict()

    for item, count in items.items():
        item_obj = await get_item_by_name(session, item)
        if item_obj.item_type == ItemType.AVATAR:
            avatar_items[item] = count

    for item, count in items.items():
        item_obj = await get_item_by_name(session, item)
        if item_obj.item_type != ItemType.AVATAR:  # TODO: != ItemType.AVATAR <- –∫–æ—Å—Ç—ã–ª—å, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –±—É–¥—É—â–µ–º.
            property_items[item] = count

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f'üéÆ –í–∞—à–∞ –∫–ª–∏–∫—É—Ö–∞: {formated_username}\n'
        f'üí∞ –ë–∞–ª–∞–Ω—Å: {scr.amount_changer(balance_main)}$\n'
        f'üí¶ –ö–æ–Ω—á–∞: {scr.amount_changer(balance_alt)}\n'
        f'üéÅ –ö–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤: {scr.amount_changer(bonus_count)}\n'
        f'‚ú® –ö–æ–ª-–≤–æ –º–∏–Ω–∏-–±–æ–Ω—É—Å–æ–≤: {scr.amount_changer(mini_bonus_count)}\n'
        f'üéØ –ö–æ–ª-–≤–æ "0" –≤ —Ä—É–ª–µ—Ç–∫–µ: {scr.amount_changer(roulette_zero_count)}\n'
        f'üé∞ –ö–æ–ª-–≤–æ "777" –≤ —Å–ª–æ—Ç–∞—Ö: {scr.amount_changer(slot_777_count)}\n'
        f'üñºÔ∏è –ê–≤–∞—Ç–∞—Ä: {avatar_item}\n'
        f'üéí –í–∏—Ç—Ä–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {", ".join([f"{item} (x{count})" for item, count in avatar_items.items()])}\n'
        f'üì¶ –ò–º—É—â–µ—Å—Ç–≤–æ: {", ".join([f"{item} (x{count})" for item, count in property_items.items()])}\n'
        f'üíª –†–∞–Ω–≥: {rank}'
    )

    input_file = file_cache_original.get(avatar_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–≤–∞—Ç–∞—Ä–∞ –∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    if avatar_path:
        await message.answer_photo(
            photo=input_file,
            caption=profile_text,
            reply_to_message_id=message.message_id
        )
    else:
        await message.answer(profile_text, reply_to_message_id=message.message_id)
