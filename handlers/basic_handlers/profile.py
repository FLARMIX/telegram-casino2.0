from io import BytesIO

from PIL import Image
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command
from handlers.init_router import router
from database.database import Database
from scripts.scripts import Scripts
from aiogram.utils.markdown import hlink


@router.message(Command('—è'))
@router.message(Command('me'))
async def me(message: Message):
    db = Database()
    scr = Scripts()
    user_id = message.from_user.id
    username = message.from_user.username

    if not db.get_user_by_tgid(user_id):
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /register')
        return

    if not db.get_user_stat(user_id, 'tgusername')[1:] == username:
        db.update_user('tgusername', '@' + username, user_id)

    tg_username = db.get_user_stat(user_id, "tgusername")[1:]
    username = db.get_user_stat(user_id, "username")
    formated_username = hlink(f'{username}', f'https://t.me/{tg_username}')
    balance_main = str(db.get_user_stat(user_id, 'balance_main'))
    balance_alt = str(db.get_user_stat(user_id, 'balance_alt'))
    bonus_count = str(db.get_user_stat(user_id, 'bonus_count'))
    mini_bonus_count = str(db.get_user_stat(user_id, 'mini_bonus_count'))

    # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏–≥—Ä–æ–∫–∞
    avatar_item = db.get_user_avatar(user_id)
    avatar_path = db.get_item_path(avatar_item)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    items = db.get_user_items(user_id)
    avatar_items = {item: count for item, count in items.items() if db.get_item_type(item) == "avatar"}
    property_items = {item: count for item, count in items.items() if db.get_item_type(item) != "avatar"}

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f'üéÆ –í–∞—à–∞ –∫–ª–∏–∫—É—Ö–∞: {formated_username}\n'
        f'üí∞ –ë–∞–ª–∞–Ω—Å: {scr.amount_changer(balance_main)}$\n'
        f'üí∞ "Word Of Alternative Balance": {scr.amount_changer(balance_alt)}\n'
        f'üéÅ –ö–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤: {scr.amount_changer(bonus_count)}\n'
        f'ü§∂üèª –ö–æ–ª-–≤–æ –º–∏–Ω–∏-–±–æ–Ω—É—Å–æ–≤: {scr.amount_changer(mini_bonus_count)}\n'
        f'üñºÔ∏è –ê–≤–∞—Ç–∞—Ä: {avatar_item}\n'
        f'üéí –í–∏—Ç—Ä–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {", ".join([f"{item} (x{count})" for item, count in avatar_items.items()])}\n'
        f'üì¶ –ò–º—É—â–µ—Å—Ç–≤–æ: {", ".join([f"{item} (x{count})" for item, count in property_items.items()])}'
    )

    image = Image.new('RGB', (250, 250), (255, 255, 255))

    item_img = Image.open(avatar_path).resize((250, 250))
    image.paste(item_img, (0, 0))

    img_byte_arr = BytesIO()
    image.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã –∏–∑ BytesIO
    image_bytes = img_byte_arr.getvalue()

    # –°–æ–∑–¥–∞–µ–º BufferedInputFile –∏–∑ –±–∞–π—Ç–æ–≤
    input_file = BufferedInputFile(image_bytes, filename="avatars.png")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–≤–∞—Ç–∞—Ä–∞ –∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    if avatar_path:
        await message.answer_photo(
            photo=input_file,
            caption=profile_text,
            reply_to_message_id=message.message_id
        )
    else:
        await message.answer(profile_text, reply_to_message_id=message.message_id)
