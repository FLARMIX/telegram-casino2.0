import re
from uuid import uuid4

from aiogram import Bot
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from sqlalchemy.ext.asyncio import AsyncSession

from config import ADMIN_IDs
from database.SQLmodels import Rank
from scripts.scripts import Scripts
from scripts.loggers import log
from handlers.init_router import router

from aiogram.utils.markdown import hlink


from database.methods import (
    get_user_by_tguserid,
    get_user_stat,
    get_dict_user_items,
    get_item_by_name,
    update_user, get_items_by_names, get_user_avatar, get_user_rank,
)
from database.models import ItemType

COLOR_STACKS = {'—á–µ—Ä–Ω–æ–µ', '—á—ë—Ä–Ω–æ–µ', '–∫—Ä–∞—Å–Ω–æ–µ', '—á–µ—Ç', '—á—ë—Ç', '–Ω–µ—á–µ—Ç', '–Ω–µ—á—ë—Ç'}
ZERO_STACK = '–∑–µ—Ä–æ'


@router.inline_query()
@log("Finding errors in inline roulette :)")
async def inline_roulette(inline_query: InlineQuery, bot: Bot, session: AsyncSession):
    scr = Scripts()
    query = (inline_query.query or "").strip()

    # ---------- –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ----------
    # –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –±–∞–∑–µ)
    user = await get_user_by_tguserid(session, inline_query.from_user.id)
    if not user:
        result = InlineQueryResultArticle(
            id=str(uuid4()),
            title="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã",
            description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –≤ –±–æ—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å.",
            input_message_content=InputTextMessageContent(
                message_text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –≤ –±–æ—Ç–µ."
            ),
        )
        await inline_query.answer([result], cache_time=0, is_personal=True)
        return

    user_id = user.tguserid

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    if not await scr.check_channel_subscription(bot, user_id):
        result = InlineQueryResultArticle(
            id=str(uuid4()),
            title="–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª",
            description="–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @PidorsCasino.",
            input_message_content=InputTextMessageContent(
                message_text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @PidorsCasino. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É."
            ),
        )
        await inline_query.answer([result], cache_time=0, is_personal=True)
        return

    # --- –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: "—Å–µ—Ç <—Å—É–º–º–∞>" ---
    if query.lower().startswith("—Å–µ—Ç"):
        # –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–≤–µ—á–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
        if str(user_id) not in ADMIN_IDs:
            result = InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞",
                description="–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                input_message_content=InputTextMessageContent(
                    message_text="‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
                ),
            )
            await inline_query.answer([result], cache_time=0, is_personal=True)
            return

        # –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "—Å–µ—Ç <—Å—É–º–º–∞>"
        parts = query.split(None, 1)
        if len(parts) == 1:
            result = InlineQueryResultArticle(
                id=str(uuid4()),
                title="–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É",
                description="–§–æ—Ä–º–∞—Ç: —Å–µ—Ç <—Å—É–º–º–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—Å–µ—Ç 100–∫' –∏–ª–∏ '—Å–µ—Ç 2kk')",
                input_message_content=InputTextMessageContent(
                    message_text="–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É: –ø—Ä–∏–º–µ—Ä '—Å–µ—Ç 100–∫' –∏–ª–∏ '—Å–µ—Ç 2kk'"
                ),
            )
            await inline_query.answer([result], cache_time=0, is_personal=True)
            return

        amount = parts[1].lower().strip()

        # special: "–≤—Å–µ"/"–≤—Å—ë"
        if amount in ("–≤—Å–µ", "–≤—Å—ë"):
            current_balance = await get_user_stat(session, user_id, "balance_main")
            amount = str(current_balance)

        # –ø–∞—Ä—Å–∏–º —Å—É–º–º—É —á–µ—Ä–µ–∑ Scripts
        try:
            int_amount = scr.unformat_number(scr.amount_changer(amount))
        except Exception:
            result = InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞",
                description="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 100, 100–∫, 2kk",
                input_message_content=InputTextMessageContent(
                    message_text="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 100, 100–∫, 2kk"
                ),
            )
            await inline_query.answer([result], cache_time=0, is_personal=True)
            return

        if int_amount <= 0:
            result = InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞",
                description="–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.",
                input_message_content=InputTextMessageContent(
                    message_text="–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0."
                ),
            )
            await inline_query.answer([result], cache_time=0, is_personal=True)
            return

        await update_user(session, "balance_main", int_amount, user_id)

        result_text = f"[–ö–æ–º–∞–Ω–¥–∞ –ì–ª. –ê–¥–º–∏–Ω–æ–≤] –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–µ–±–µ: {scr.amount_changer(int_amount)}$"
        result = InlineQueryResultArticle(
            id=str(uuid4()),
            title="–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω",
            description=(result_text[:200] if len(result_text) > 200 else result_text),
            input_message_content=InputTextMessageContent(message_text=result_text),
        )
        await inline_query.answer([result], cache_time=0, is_personal=True)
        return  # <<< –∫—Ä–∏—Ç–∏—á–Ω–æ: –Ω–µ –ø—Ä–æ–≤–∞–ª–∏–≤–∞–µ–º—Å—è –≤ —Ä–∞–∑–±–æ—Ä —Å—Ç–∞–≤–æ–∫ –Ω–∏–∂–µ



    if query == "":
        # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        hint = ("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <—Å—Ç–∞–≤–∫–∞> <—Å—É–º–º–∞>\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "–∫—Ä–∞—Å–Ω–æ–µ 100–∫\n"
                "—á—ë—Ç 200\n"
                "–∑–µ—Ä–æ –≤—Å–µ")
        result = InlineQueryResultArticle(
            id=str(uuid4()),
            title="–ö–∞–∫ –∏–≥—Ä–∞—Ç—å",
            description="–ü—Ä–∏–º–µ—Ä: '–∫—Ä–∞—Å–Ω–æ–µ 100–∫' –∏–ª–∏ '–∑–µ—Ä–æ –≤—Å–µ'",
            input_message_content=InputTextMessageContent(message_text=hint),
        )
        await inline_query.answer([result], cache_time=0, is_personal=True)
        return

    # –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å = "—è" ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    if query.lower() == "—è":
        # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
        user = await get_user_by_tguserid(session, user_id)

        # –ø—Ä–µ–¥–º–µ—Ç—ã (–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫)
        items = await get_dict_user_items(session, user_id)
        avatar_items = {}
        property_items = {}
        for item, count in items.items():
            item_obj = await get_item_by_name(session, item)
            if item_obj.item_type == ItemType.AVATAR:
                avatar_items[item] = count
            else:
                property_items[item] = count

        tg_username = user.tgusername
        tg_username = tg_username[1:]

        is_hidden = user.is_hidden
        username = user.username

        if is_hidden:
            formated_username = username
        else:
            formated_username = hlink(f'{username}', f'https://t.me/{tg_username}')

        balance_main = str(user.balance_main)
        balance_alt = str(user.balance_alt)
        bonus_count = str(user.bonus_count)
        mini_bonus_count = str(user.mini_bonus_count)
        roulette_zero_count = str(user.roulette_zero_count)
        slot_777_count = str(user.slot_777_count)
        rank = await get_user_rank(session, user_id)

        if isinstance(rank, Rank):
            rank_name = rank.rank_name
        else:
            rank_name = rank

        # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏–≥—Ä–æ–∫–∞
        avatar_item_name = await get_user_avatar(session, user.tguserid)
        avatar_item = await get_item_by_name(session, avatar_item_name)

        # –ü—Ä–µ–¥–º–µ—Ç—ã
        user_items = await get_dict_user_items(session, user.tguserid)
        all_item_names = list(user_items.keys())
        item_objects = await get_items_by_names(session, all_item_names)
        item_map = {item.item_name: item for item in item_objects}

        avatar_items = {}
        property_items = {}
        for name, count in user_items.items():
            obj = item_map.get(name)
            if not obj:
                continue
            (avatar_items if obj.item_type == ItemType.AVATAR else property_items)[name] = count

        result_text = (
            f'üéÆ –í–∞—à–∞ –∫–ª–∏–∫—É—Ö–∞: {formated_username}\n'
            f'üí∞ –ë–∞–ª–∞–Ω—Å: {scr.amount_changer(balance_main)}$\n'
            f'üí¶ –ö–æ–Ω—á–∞: {scr.amount_changer(balance_alt)}\n'
            f'üéÅ –ö–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤: {scr.amount_changer(bonus_count)}\n'
            f'‚ú® –ö–æ–ª-–≤–æ –º–∏–Ω–∏-–±–æ–Ω—É—Å–æ–≤: {scr.amount_changer(mini_bonus_count)}\n'
            f'üéØ –ö–æ–ª-–≤–æ "0" –≤ —Ä—É–ª–µ—Ç–∫–µ: {scr.amount_changer(roulette_zero_count)}\n'
            f'üé∞ –ö–æ–ª-–≤–æ "777" –≤ —Å–ª–æ—Ç–∞—Ö: {scr.amount_changer(slot_777_count)}\n'
            f'üñº –ê–≤–∞—Ç–∞—Ä: {avatar_item.item_name}\n'
            f'üéí –í–∏—Ç—Ä–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {", ".join([f"{item} (x{count})" for item, count in avatar_items.items()])}\n'
            f'üì¶ –ò–º—É—â–µ—Å—Ç–≤–æ: {", ".join([f"{item} (x{count})" for item, count in property_items.items()])}\n'
            f'üíª –†–∞–Ω–≥: {rank_name}'
        )

        result = InlineQueryResultArticle(
            id=str(uuid4()),
            title="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å",
            description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –±–∞–ª–∞–Ω—Å.",
            input_message_content=InputTextMessageContent(
                message_text=result_text, parse_mode="HTML", disable_web_page_preview=True
            ),
        )
        await inline_query.answer([result], cache_time=0, is_personal=True)
        return

    # ---------- —Ä–∞–∑–±–æ—Ä —Å—Ç–∞–≤–∫–∏ ----------

    # –∑–∞—â–∏—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä: stack + optional amount (maxsplit=1)
    try:
        stack, amount = query.split(None, 1)
    except ValueError:
        # –Ω–µ—Ç —Å—É–º–º—ã
        result = InlineQueryResultArticle(
            id=str(uuid4()),
            title="–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É",
            description="–§–æ—Ä–º–∞—Ç: <—Å—Ç–∞–≤–∫–∞> <—Å—É–º–º–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–∫—Ä–∞—Å–Ω–æ–µ 100–∫')",
            input_message_content=InputTextMessageContent(
                message_text="–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏. –ü—Ä–∏–º–µ—Ä: '–∫—Ä–∞—Å–Ω–æ–µ 100–∫'"
            ),
        )
        await inline_query.answer([result], cache_time=0, is_personal=True)
        return

    stack = stack.lower()
    amount = amount.lower().strip()

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Ç–µ–∫–∞
    if stack not in COLOR_STACKS and stack != ZERO_STACK:
        result = InlineQueryResultArticle(
            id=str(uuid4()),
            title="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–µ–∫",
            description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '—á–µ—Ä–Ω–æ–µ', '–∫—Ä–∞—Å–Ω–æ–µ', '—á–µ—Ç', '–Ω–µ—á–µ—Ç' –∏–ª–∏ '–∑–µ—Ä–æ'.",
            input_message_content=InputTextMessageContent(
                message_text="–û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω —Å—Ç–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—á–µ—Ä–Ω–æ–µ', '–∫—Ä–∞—Å–Ω–æ–µ', '—á–µ—Ç', '–Ω–µ—á–µ—Ç' –∏–ª–∏ '–∑–µ—Ä–æ'."
            ),
        )
        await inline_query.answer([result], cache_time=0, is_personal=True)
        return

    # special: "–≤—Å–µ"/"–≤—Å—ë"
    if amount in ("–≤—Å–µ", "–≤—Å—ë"):
        current_balance = await get_user_stat(session, user_id, "balance_main")
        amount = str(current_balance)

    # –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—É–º–º—É —á–µ—Ä–µ–∑ –≤–∞—à Scripts
    try:
        int_amount = scr.unformat_number(scr.amount_changer(amount))
    except Exception:
        result = InlineQueryResultArticle(
            id=str(uuid4()),
            title="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞",
            description="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 100, 100–∫, 2kk",
            input_message_content=InputTextMessageContent(
                message_text="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 100, 100–∫, 2kk"
            ),
        )
        await inline_query.answer([result], cache_time=0, is_personal=True)
        return

    if int_amount <= 0:
        result = InlineQueryResultArticle(
            id=str(uuid4()),
            title="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞",
            description="–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.",
            input_message_content=InputTextMessageContent(message_text="–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0.")
        )
        await inline_query.answer([result], cache_time=0, is_personal=True)
        return

    # –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (–µ—â–µ —Ä–∞–∑)
    current_balance = await get_user_stat(session, user_id, "balance_main")
    if current_balance < int_amount:
        result = InlineQueryResultArticle(
            id=str(uuid4()),
            title="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
            description=f"–í–∞—à –±–∞–ª–∞–Ω—Å: {scr.amount_changer(str(current_balance))}$",
            input_message_content=InputTextMessageContent(
                message_text=f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {scr.amount_changer(str(current_balance))}$"
            ),
        )
        await inline_query.answer([result], cache_time=0, is_personal=True)
        return

    # —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ)
    await update_user(session, "balance_main", current_balance - int_amount, user_id)
    balance_after_bet = await get_user_stat(session, user_id, "balance_main")

    # —Å–∏–º—É–ª–∏—Ä—É–µ–º —Ä—É–ª–µ—Ç–∫—É
    status, number = scr.roulette_randomizer(stack)
    current_stack = scr.pic_color(number)

    if stack in COLOR_STACKS:
        if status:
            win_amount = int_amount * 2
            await update_user(session, "balance_main", balance_after_bet + win_amount, user_id)
            final_balance = await get_user_stat(session, user_id, "balance_main")
            result_text = (
                f"üéâ [{stack} {scr.amount_changer(amount)}] {number} - {current_stack.capitalize()}! –°—Ç–∞–≤–∫–∞ x2! "
                f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {scr.amount_changer(win_amount)}$!\n"
                f"–ë–∞–ª–∞–Ω—Å: {scr.amount_changer(final_balance)}$"
            )
        else:
            final_balance = await get_user_stat(session, user_id, "balance_main")
            result_text = (
                f"üò¢ [{stack} {scr.amount_changer(amount)}] {number} - {current_stack.capitalize()}! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ "
                f"{scr.amount_changer(int_amount)}$.\n"
                f"–ë–∞–ª–∞–Ω—Å: {scr.amount_changer(final_balance)}$"
            )

    else:  # '–∑–µ—Ä–æ'
        if status:
            win_amount = int_amount * 42
            await update_user(session, "balance_main", balance_after_bet + win_amount, user_id)
            # –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω—É–ª–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ user.roulette_zero_count
            final_balance = await get_user_stat(session, user_id, "balance_main")
            result_text = (
                f"üéâ [{stack} {scr.amount_changer(amount)}] {number} - {current_stack.capitalize()}! –°—Ç–∞–≤–∫–∞ x42! "
                f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {scr.amount_changer(win_amount)}$!\n"
                f"–ë–∞–ª–∞–Ω—Å: {scr.amount_changer(final_balance)}$"
            )
        else:
            final_balance = await get_user_stat(session, user_id, "balance_main")
            result_text = (
                f"üò¢ [{stack} {scr.amount_changer(amount)}] {number} - {current_stack.capitalize()}! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ "
                f"{scr.amount_changer(int_amount)}$.\n"
                f"–ë–∞–ª–∞–Ω—Å: {scr.amount_changer(final_balance)}$"
            )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π inline-—Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = InlineQueryResultArticle(
        id=str(uuid4()),
        title="–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏",
        description=(result_text[:200] if len(result_text) > 200 else result_text),
        input_message_content=InputTextMessageContent(message_text=result_text),
    )
    await inline_query.answer([result], cache_time=0, is_personal=True)
