from aiogram import Bot
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
import logging

from sqlalchemy.ext.asyncio import AsyncSession

from config import ADMIN_IDs
from database.methods import get_user_by_tguserid, get_user_stat, get_user_items, get_item_by_name, check_user_in, \
    update_user
from database.models import ItemType
from handlers.init_router import router
from scripts.scripts import Scripts

logger = logging.getLogger(__name__)


@router.inline_query()
async def inline_roulette(inline_query: InlineQuery, bot: Bot, session: AsyncSession):
    scr = Scripts()

    user = await get_user_by_tguserid(session, inline_query.from_user.id)
    user_id = user.tguserid
    balance_main = user.balance_main

    user_channel_status = await scr.check_channel_subscription(bot, user_id)

    if not user_channel_status:
        result = InlineQueryResultArticle(
            id="1",
            title="–ü–æ–¥–ø–∏—à–∏—Å—å –ø—Ä–µ–∂–¥–µ —á–µ–º –∏–≥—Ä–∞—Ç—å!",
            descriprion='–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª @PidorsCasino'
                        '\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª.',
            input_message_content=InputTextMessageContent(
                message_text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª @PidorsCasino"
                             "\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª."
            )
        )
        await inline_query.answer([result], cache_time=1)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ (—Å—Ç–∞–≤–∫–∞ –∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏)
    query = inline_query.query.strip()
    if query == "—è":
        if not await get_user_by_tguserid(session, user_id):
            result_text = "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –≤ –±–æ—Ç–µ!"
        else:
            user = await get_user_by_tguserid(session, user_id)
            balance_main = str(user.balance_main)
            balance_alt = str(user.balance_alt)
            bonus_count = str(user.bonus_count)
            mini_bonus_count = str(user.mini_bonus_count)
            rank = user.rank

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫)
            items = await get_user_items(session, user_id)
            avatar_items = dict()
            property_items = dict()

            for item, count in items.items():
                item_obj = await get_item_by_name(session, item)
                if item_obj.item_type == ItemType.AVATAR:
                    avatar_items[item] = count

            for item, count in items.items():
                item_obj = await get_item_by_name(session, item)
                if item_obj.item_type != ItemType.AVATAR:  # TODO: != ItemType.AVATAR <- –∫–æ—Å—Ç—ã–ª—å, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –±—É–¥—É—â–µ–º.
                    property_items[item] = count

            result_text = (
                f'üí∞ –í–∞—à –ë–∞–ª–∞–Ω—Å: {scr.amount_changer(balance_main)}$\n'
                f'üí∞ "Word Of Alternative Balance": {scr.amount_changer(balance_alt)}\n'
                f'üéÅ –ö–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤: {scr.amount_changer(bonus_count)}\n'
                f'ü§∂üèª –ö–æ–ª-–≤–æ –º–∏–Ω–∏-–±–æ–Ω—É—Å–æ–≤: {scr.amount_changer(mini_bonus_count)}\n'
                f'üéí –í–∏—Ç—Ä–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {", ".join([f"{item} (x{count})" for item, count in avatar_items.items()])}\n'
                f'üì¶ –ò–º—É—â–µ—Å—Ç–≤–æ: {", ".join([f"{item} (x{count})" for item, count in property_items.items()])}\n'
                f'üíª –†–∞–Ω–≥: {rank}'
            )

        result = InlineQueryResultArticle(
            id="1",
            title="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å",
            description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ",
            input_message_content=InputTextMessageContent(
                message_text=result_text, parse_mode="HTML"
            )
        )
        await inline_query.answer([result], cache_time=1)
        return

    try:
        stack, amount = query.split()  # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –∏ —Å—É–º–º—É
    except ValueError:
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        result = InlineQueryResultArticle(
            id="1",
            title="–û—à–∏–±–∫–∞",
            description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <—Å—Ç–∞–≤–∫–∞> <—Å—É–º–º–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–∞—Å–Ω–æ–µ 100–∫')",
            input_message_content=InputTextMessageContent(
                message_text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <—Å—Ç–∞–≤–∫–∞> <—Å—É–º–º–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∫—Ä–∞—Å–Ω–æ–µ 100–∫')"
            )
        )
        await inline_query.answer([result], cache_time=1)
        return

    if not await check_user_in(session, user_id):
        result = InlineQueryResultArticle(
            id="1",
            title="–û—à–∏–±–∫–∞",
            description="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.",
            input_message_content=InputTextMessageContent(
                message_text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."
            )
        )
        await inline_query.answer([result], cache_time=1)
        return

    if amount in ['–≤—Å–µ', '–≤—Å—ë']:
        amount = str(balance_main)

    int_amount = scr.unformat_number(scr.amount_changer(amount))

    if int_amount <= 0:
        result = InlineQueryResultArticle(
            id="1",
            title="–û—à–∏–±–∫–∞",
            description="–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!",
            input_message_content=InputTextMessageContent(
                message_text="–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!"
            )
        )
        await inline_query.answer([result], cache_time=1)
        return

    if balance_main < int_amount:
        result = InlineQueryResultArticle(
            id="1",
            title="–û—à–∏–±–∫–∞",
            description=f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {scr.amount_changer(str(balance_main))}$",
            input_message_content=InputTextMessageContent(
                message_text=f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {scr.amount_changer(str(balance_main))}$"
            )
        )
        await inline_query.answer([result], cache_time=1)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user(session, "balance_main", balance_main - int_amount, user_id)
    new_balance = await get_user_stat(session, user_id, 'balance_main')

    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä—É–ª–µ—Ç–∫–∏
    if stack in ['—á–µ—Ä–Ω–æ–µ', '—á—ë—Ä–Ω–æ–µ', '–∫—Ä–∞—Å–Ω–æ–µ', '—á–µ—Ç', '—á—ë—Ç', '–Ω–µ—á–µ—Ç', '–Ω–µ—á—ë—Ç']:
        status, number = scr.roulette_randomizer(stack)
        current_stack = scr.pic_color(number)
        if status:
            win_amount = int_amount * 2
            await update_user(session, 'balance_main', new_balance + win_amount, user_id)
            current_balance = await get_user_stat(session, user_id, "balance_main")
            result_text = (
                f"üéâ [{stack} {amount}] {number} - {current_stack.capitalize()}! –°—Ç–∞–≤–∫–∞ x2! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ "
                f"{scr.amount_changer(str(win_amount))}$!\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {scr.amount_changer(str(current_balance))}$"
            )
        else:
            current_balance = await get_user_stat(session, user_id, "balance_main")
            result_text = (
                f"üò¢ [{stack} {amount}] {number} - {current_stack.capitalize()}! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ "
                f"{scr.amount_changer(str(int_amount))}$.\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {scr.amount_changer(str(current_balance))}$"
            )
    elif stack in ['–∑–µ—Ä–æ']:
        status, number = scr.roulette_randomizer(stack)
        current_stack = scr.pic_color(number)
        if status:
            win_amount = int_amount * 36
            await update_user(session, 'balance_main', new_balance + win_amount, user_id)
            current_balance = await get_user_stat(session, user_id, "balance_main")
            result_text = (
                f"üéâ [{stack} {amount}] {number} - {current_stack.capitalize()}! –°—Ç–∞–≤–∫–∞ x36ü§ë!!! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ "
                f"{scr.amount_changer(str(win_amount))}$!\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {scr.amount_changer(str(current_balance))}$"
            )
        else:
            current_balance = await get_user_stat(session, user_id, "balance_main")
            result_text = (
                f"üò¢ [{stack} {amount}] {number} - {current_stack.capitalize()}! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ "
                f"{scr.amount_changer(str(int_amount))}$.\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {scr.amount_changer(str(current_balance))}$"
            )
    else:
        result_text = (
            f"–û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω —Å—Ç–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—á–µ—Ä–Ω–æ–µ', '—á—ë—Ä–Ω–æ–µ', '–∫—Ä–∞—Å–Ω–æ–µ', "
            f"'—á–µ—Ç', '—á—ë—Ç', '–Ω–µ—á–µ—Ç', '–Ω–µ—á—ë—Ç' –∏–ª–∏ '–∑–µ—Ä–æ'."
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ inline-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result = InlineQueryResultArticle(
        id="1",
        title="–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏",
        description=result_text,
        input_message_content=InputTextMessageContent(
            message_text=result_text
        )
    )

    await inline_query.answer([result], cache_time=0)  # –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
