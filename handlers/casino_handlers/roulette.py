import re

from aiogram import Bot, F
from aiogram.types import Message
from aiogram.utils.markdown import hlink
from sqlalchemy.ext.asyncio import AsyncSession

from config import Bot_username
from database.methods import get_user_by_tguserid, get_user_stat, check_user_in, update_user
from handlers.init_router import router
from scripts.loggers import log

from scripts.scripts import Scripts


STACKS = r"(?:–∫—Ä–∞—Å–Ω–æ–µ|—á–µ—Ä–Ω–æ–µ|—á—ë—Ä–Ω–æ–µ|–∑–µ—Ä–æ|—á–µ—Ç|—á—ë—Ç|–Ω–µ—á–µ—Ç|–Ω–µ—á—ë—Ç)"
AMOUNT = r"(?P<amount>(?:–≤—Å[–µ—ë])|\d+(?:[.,]\d+)?[–∫k]*)"  # 200, 200–∫/200k, 2m, "–≤—Å–µ/–≤—Å—ë"

ROULETTE_RE = re.compile(
    rf"^/?(?:—Ä—É–ª–µ—Ç–∫–∞|—Ä—É–ª|roulette|rul|roulette@{re.escape(Bot_username)}|rul@{re.escape(Bot_username)})\s+"
    rf"(?P<stack>{STACKS})(?:\s+{AMOUNT})?\s*$",
    re.IGNORECASE,
)


@router.message(F.text.regexp(ROULETTE_RE).as_("m"))
@log("If in this roulette has an error, then here is the log UwU")
async def roulette(message: Message, bot: Bot, session: AsyncSession, m: re.Match):
    scr = Scripts()

    stack = m.group("stack").lower()
    amount = m.group("amount")

    if amount is None:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏!", reply_to_message_id=message.message_id)

    user = await get_user_by_tguserid(session, message.from_user.id)
    user_id = user.tguserid

    tg_username = await get_user_stat(session, user_id, "tgusername")
    tg_username = tg_username[1:]

    balance_main = user.balance_main
    is_hidden = user.is_hidden
    username = user.username

    if is_hidden:
        formated_username = username
    else:
        formated_username = hlink(f'{username}', f'https://t.me/{tg_username}')

    user_channel_status = await scr.check_channel_subscription(bot, user_id)

    if not await scr.check_channel_subscription(bot, user.tguserid):
        await message.answer('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @PidorsCasino'
                             '\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.',
                             reply_to_message_id=message.message_id)
        return

    if not await check_user_in(session, user_id):
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /register",
                             reply_to_message_id=message.message_id)
        return

    if amount in ['–≤—Å–µ', '–≤—Å—ë']:
        amount = str(balance_main)

    int_amount = scr.unformat_number(scr.amount_changer(amount))

    if int_amount <= 0:
        await message.answer("–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!",
                             reply_to_message_id=message.message_id)
        return

    if balance_main < int_amount:
        await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n–í–∞—à –±–∞–ª–∞–Ω—Å {scr.amount_changer(str(balance_main))}",
                             reply_to_message_id=message.message_id)
        return

    await update_user(session, "balance_main", balance_main - int_amount, user_id)

    if stack in ['—á–µ—Ä–Ω–æ–µ', '—á—ë—Ä–Ω–æ–µ', '–∫—Ä–∞—Å–Ω–æ–µ', '—á–µ—Ç', '—á—ë—Ç', '–Ω–µ—á–µ—Ç', '–Ω–µ—á—ë—Ç']:
        status, number = scr.roulette_randomizer(stack)
        current_stack = scr.pic_color(number)
        if status:
            before_balance = await get_user_stat(session, user_id, "balance_main")
            await update_user(session, 'balance_main', before_balance + int_amount * 2, user_id)
            current_balance = await get_user_stat(session, user_id, "balance_main")

            await message.answer(f"{formated_username}, {number} - {current_stack.capitalize()}! –°—Ç–∞–≤–∫–∞ x2 "
                                 f"{scr.randomize_emoji(win=True)}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ "
                                 f"{scr.amount_changer(str(int_amount * 2))}$"
                                 f"\n–ë–∞–ª–∞–Ω—Å: {scr.amount_changer(str(current_balance))}$",
                                 disable_web_page_preview=True, reply_to_message_id=message.message_id)
            await update_user(session, "balance_main", balance_main + int_amount, user_id)
        else:
            current_balance = await get_user_stat(session, user_id, 'balance_main')
            await message.answer(f"{formated_username}, {number} - {current_stack.capitalize()}! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ "
                                 f"{scr.amount_changer(str(int_amount))}$ {scr.randomize_emoji(win=False) * 2}"
                                 f"\n–ë–∞–ª–∞–Ω—Å: {scr.amount_changer(str(current_balance))}$",
                                 disable_web_page_preview=True, reply_to_message_id=message.message_id)
    elif stack in ['–∑–µ—Ä–æ']:
        status, number = scr.roulette_randomizer(stack)
        current_stack = scr.pic_color(number)
        if status:
            before_balance = await get_user_stat(session, user_id, "balance_main")
            await update_user(session, 'balance_main', before_balance + int_amount * 42, user_id)
            current_balance = await get_user_stat(session, user_id, "balance_main")

            current_zero_count = user.roulette_zero_count
            await update_user(session, 'roulette_zero_count', current_zero_count + 1, user_id)

            await message.answer(f"{formated_username}, {number} - {current_stack.capitalize()}! –°—Ç–∞–≤–∫–∞ x42ü§ë!!! "
                                 f"–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ "
                                 f"{scr.amount_changer(str(int_amount * 42))}$"
                                 f"\n–ë–∞–ª–∞–Ω—Å: {scr.amount_changer(str(current_balance))}$",
                                 disable_web_page_preview=True, reply_to_message_id=message.message_id)
        else:
            current_balance = await get_user_stat(session, user_id, 'balance_main')
            await message.answer(f"{formated_username}, {number} - {current_stack.capitalize()}! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ "
                                 f"{scr.amount_changer(str(int_amount))}$ {scr.randomize_emoji(win=False) * 2}"
                                 f"\n–ë–∞–ª–∞–Ω—Å: {scr.amount_changer(str(current_balance))}$",
                                 disable_web_page_preview=True, reply_to_message_id=message.message_id)
    else:
        await update_user(session, "balance_main", balance_main + int_amount, user_id)
        await message.answer(f"–û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω —Å—Ç–µ–∫. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '—á–µ—Ä–Ω–æ–µ', "
                             f"'—á—ë—Ä–Ω–æ–µ', '–∫—Ä–∞—Å–Ω–æ–µ', '—á–µ—Ç', '—á—ë—Ç', '–Ω–µ—á–µ—Ç', '–Ω–µ—á—ë—Ç' –∏–ª–∏ '–∑–µ—Ä–æ'.",
                             reply_to_message_id=message.message_id)


@router.message(F.text.regexp(f"^/?(—Ä—É–ª–µ—Ç–∫–∞|—Ä—É–ª|roulette|rul|roulette@{Bot_username})(?:\s|$)", flags=re.IGNORECASE))
@log("If in this roulette has an error, then here is the log UwU")
async def roulette_no_stack(message: Message):
    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n\n/rul –∫—Ä–∞—Å–Ω–æ–µ 101\n—Ä—É–ª–µ—Ç–∫–∞ —á—ë—Ç 200–∫\n—Ä—É–ª –∑–µ—Ä–æ –≤—Å–µ\n\n"
                         "–í—Å–µ —Ç–µ–∫—É—â–∏–µ —Å—Ç–µ–∫–∏: '—á–µ—Ä–Ω–æ–µ', '—á—ë—Ä–Ω–æ–µ', '–∫—Ä–∞—Å–Ω–æ–µ', '—á–µ—Ç', '—á—ë—Ç', '–Ω–µ—á–µ—Ç', '–Ω–µ—á—ë—Ç' –∏–ª–∏ '–∑–µ—Ä–æ'.")

